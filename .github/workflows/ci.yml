name: AIM AHEAD APP CI

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - name: Install dependencies
        run: |
          npm ci
      - name: Check and lint code formatting
        run: |
          npm run lint-staged
      - name: check-secrets
        uses: secret-scanner/action@0.0.2

  test:
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
      - name: Install dependencies
        run: |
          npm ci
      - name: Run tests
        run: |
          npm test -- --watchAll=false

  codeql:
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      security-events: write
      packages: read
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          build-mode: none

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    env:
      IMAGE_URI: ${{secrets.IMAGE_URI}}
      IMAGE_TAG: latest
    permissions:
      contents: read
      id-token: write
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image
        run: |
          docker build -t $IMAGE_URI:$IMAGE_TAG .

      - name: Image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_URI }}:${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          limit-severities-for-sarif: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: trivy-image

      - name: Push image to Amazon ECR
        run: |
          docker push $IMAGE_URI:$IMAGE_TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service --cluster aim-ahead-cluster-dev --service aim-ahead-app-service-dev --force-new-deployment
        env:
          AWS_REGION: us-east-1
